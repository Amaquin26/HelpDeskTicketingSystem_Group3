@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor HttpContextAccessor

<div class="modal-backdrop fade" id="backdrop"></div>

<!-- Sidebar -->
<div id="sidebar" class="@((ViewBag.LoginView == true) ? "hide-navbar" : "sidebar")">
    <div id="toggleSidebar" class="logo">
        <img src="~/img/icon-white.png" alt="Logo">
        <label>Resolve.it</label>
    </div>
    <ul>
        <li class="@(IsActive("Index", "Ticket") ? "active" : "")">
            <a asp-action="Index" asp-controller="Ticket"><i class="fas fa-ticket-alt"></i> <span>Tickets</span></a>
        </li>
        <li class="@(IsActive("Index", "User") ? "active" : "")">
            <a asp-action="Index" asp-controller="User"><i class="fas fa-users"></i> <span>Users</span></a>
        </li>
        <li class="@(IsActive("Index", "Team") ? "active" : "")">
            <a asp-action="Index" asp-controller="Team"><i class="fas fa-users-cog"></i> <span>Teams</span></a>
        </li>
        <li class="@(IsActive("Index", "Feedback") ? "active" : "")">
            <a asp-action="Index" asp-controller="Feedback"><i class="fas fa-comments"></i><span>Feedbacks</span></a>
        </li>
        <li>
            <a asp-action="SignOutUser" asp-controller="Account"><i class="fas fa-sign-out-alt"></i><span>Logout</span></a>
        </li>
    </ul>
</div>

@functions {
    public bool IsActive(string action, string controller)
    {
        var currentAction = HttpContextAccessor.HttpContext?.Request.RouteValues["action"]?.ToString();
        var currentController = HttpContextAccessor.HttpContext?.Request.RouteValues["controller"]?.ToString();

        return string.Equals(currentAction, action, StringComparison.OrdinalIgnoreCase) &&
               string.Equals(currentController, controller, StringComparison.OrdinalIgnoreCase);
    }
}
