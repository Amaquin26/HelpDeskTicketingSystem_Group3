@model IEnumerable<ASI.Basecode.Services.ServiceModels.TeamViewModel>

@{
    ViewData["Title"] = "Team Management";
}

<div class="content p-4" style="margin-left: 200px;">
    <h3 class="mb-4"><strong>Team Management</strong></h3>

    <div class="d-flex justify-content-between align-items-center mb-4">
        <!-- Search Input -->
        <input type="text" id="searchInput" class="form-control me-2" placeholder="Search Teams" style="flex: 1;">

        <!-- Add Team Button -->
        <a asp-action="Create" class="btn btn-success">Add Team</a>
    </div>

    <!-- Dynamic Team List (Card Layout) -->
    <div id="teamList" class="row"></div>

    <!-- Pagination Controls -->
    <nav>
        <ul id="pagination" class="pagination justify-content-center"></ul>
    </nav>
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            var teams = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model)); // Get data from the model
            var currentPage = 1;
            var itemsPerPage = 12;

            // Function to display team cards
            function displayTeams(teamsToShow) {
                var teamList = $('#teamList');
                teamList.empty(); // Clear previous teams

                // Check if teamsToShow has data
                if (teamsToShow.length === 0) {
                    teamList.append('<p class="text-muted">No teams found.</p>');
                    return;
                }

                teamsToShow.forEach(function (team) {
                    var card = `
                                        <div class="col-md-4 mb-4">
                                            <div class="card h-100">
                                                <div class="card-body d-flex flex-column">
                                                    <div class="d-flex justify-content-between align-items-center">
                                                        <h5 class="card-title text-muted"><strong>${team.TeamName}</strong></h5>
                                                        <div>
                                                            <a href="/Team/${team.TeamId}" class="edit btn btn-outline-primary btn-sm"><i class="fas fa-eye"></i></a>
                                                            <a href="/Team/Edit?id=${team.TeamId}" class="edit btn btn-outline-success btn-sm"><i class="fas fa-edit"></i></a>
                                                            <button class="btn btn-sm btn-outline-danger" onclick="deleteTeam(${team.TeamId})">
                                                                <i class="fas fa-trash-alt"></i>
                                                            </button>
                                                        </div>
                                                    </div>
                                                    <hr />
                                                    <div class="">
                                                        <p class="card-text mb-2 text-muted small"><strong>Team Leader:</strong> ${team.TeamLeaderName}</p>
                                                        <p class="card-text text-muted mb-2"><strong>Specialization:</strong> ${team.TeamSpecialization}</p>
                                                        <p class="card-text mb-2 text-muted small"><strong>Created By:</strong> ${team.CreatedBy}</p>
                                                        <p class="card-text mb-2 text-muted small"><strong>Date Created:</strong> ${new Date(team.CreatedTime).toLocaleDateString()}</p>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>`;
                    teamList.append(card);
                });
            }

            // Function to handle pagination
            function paginate(teams, page, itemsPerPage) {
                var start = (page - 1) * itemsPerPage;
                var end = start + itemsPerPage;
                return teams.slice(start, end);
            }

            // Function to create pagination buttons
            function createPagination(totalItems, itemsPerPage) {
                var totalPages = Math.ceil(totalItems / itemsPerPage);
                var pagination = $('#pagination');
                pagination.empty(); // Clear previous pagination

                for (var i = 1; i <= totalPages; i++) {
                    var pageItem = `
                                        <li class="page-item">
                                            <a class="page-link${i === currentPage ? ' bg-danger text-white' : ' text-success'}" href="#" data-page="${i}">${i}</a>
                                        </li>`;
                    pagination.append(pageItem);
                }

                // Add click event to page buttons
                $('.page-link').click(function (e) {
                    e.preventDefault();
                    currentPage = parseInt($(this).data('page'));
                    var paginatedTeams = paginate(teams, currentPage, itemsPerPage);
                    displayTeams(paginatedTeams);
                    createPagination(teams.length, itemsPerPage); // Refresh pagination
                });
            }

            // Function to handle search
            $('#searchInput').on('keyup', function () {
                var searchText = $(this).val().toLowerCase().trim(); // Get the search text
                var filteredTeams = teams.filter(function (team) {
                    return team.TeamName.toLowerCase().includes(searchText) || // Search by Team Name
                        team.TeamLeaderName.toLowerCase().includes(searchText) || // Search by Team Leader
                        team.TeamSpecialization.toLowerCase().includes(searchText); // Search by Specialization
                });

                console.log('All Teams:', teams); // Debugging
                console.log('Filtered Teams:', filteredTeams); // Debugging

                currentPage = 1; // Reset to first page after search
                displayTeams(paginate(filteredTeams, currentPage, itemsPerPage));
                createPagination(filteredTeams.length, itemsPerPage); // Refresh pagination
            });

            // Initial display of teams and pagination
            displayTeams(paginate(teams, currentPage, itemsPerPage));
            createPagination(teams.length, itemsPerPage);
        });

        function deleteTeam(teamId) {
            if (confirm('Are you sure you want to delete this team?')) {
                $.ajax({
                    url: '@Url.Action("Delete", "Team")',
                    type: 'POST',
                    data: { id: teamId },
                    success: function (result) {
                        if (result.success) {
                            location.reload(); // Reload the page after successful deletion
                        } else {
                            alert(result.message || 'Error deleting team.');
                        }
                    },
                    error: function () {
                        alert('Error deleting team.');
                    }
                });
            }
        }
    </script>
}
