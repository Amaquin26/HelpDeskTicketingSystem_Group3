@model ASI.Basecode.Services.ServiceModels.FeedbackListViewModel
@using System.Security.Claims;
@{
    ViewData["Title"] = "Feedbacks Model";
    if (User.FindFirst("Role")?.Value == "User")
    {
        Layout = "~/Views/Shared/_LayoutUser.cshtml";
    }
    else
    {
        Layout = "~/Views/Shared/_Layout.cshtml";
    }

    var containerStyle = User.FindFirst("Role")?.Value != "User" ? "margin-left: 200px;" : "";
    var containerClass = User.FindFirst("Role")?.Value != "User" ? "container content  p-4" : "container content";
}

<div class="@containerClass" style="@containerStyle">
    <h3 class="mb-4"><strong>Feedbacks</strong></h3>

    <div class="d-flex justify-content-between mb-4">
        @if (User.FindFirst("Role")?.Value == "User")
        {
            <a asp-action="Create" class="btn btn-dark" id="button-addon2">
                <i class="fas fa-plus"></i>
                Add Feedback
            </a>
        }

        <form method="get" asp-action="Index" id="searchForm">
            <div class="input-group">
                <input type="text" class="form-control" id="searchQuery" name="searchQuery" placeholder="Search Feedbacks" value="@Model.SearchQuery">
                <button class="btn btn-dark" type="submit" id="button-addon2">Search</button>
            </div>
        </form>
    </div>

    <div class="row">
    @foreach (var feedback in Model.Feedbacks)
    {
        <div class="col-md-4 mb-4">
            <div class="card h-100">
                <div class="card-body d-flex flex-column">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <p class="card-text mb-0 small">
                                <strong>@feedback.CreatedBy</strong>
                            </p>
                            <p class="card-text mb-0 text-muted small">@feedback.CreatedTime</p>
                        </div>
                        @if (User.FindFirst(ClaimTypes.NameIdentifier)?.Value == feedback.UserId || User.FindFirst("Role")?.Value == "Super Admin" || User.FindFirst("Role")?.Value == "Admin")
                        {
                            <div>
                                @if (User.FindFirst(ClaimTypes.NameIdentifier)?.Value == feedback.UserId)
                                {
                                    <a asp-action="Edit" asp-route-id="@feedback.FeedbackId" class="btn btn-sm btn-outline-dark me-1">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                }
                                <button class="btn btn-sm btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteConfirmationModal-@feedback.FeedbackId">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        }
                    </div>
                    <hr />
                    <!-- Star Rating -->
                    <div class="star-rating mb-2" id="star-rating-@feedback.FeedbackId"></div>
                    <p class="card-text flex-grow-1">@feedback.Comment</p>
                </div>
            </div>
        </div>
    }
    </div>

    <!-- Delete Feedback Modal -->
    @foreach (var feedback in Model.Feedbacks)
    {
        <div class="modal fade" id="deleteConfirmationModal-@feedback.FeedbackId" tabindex="-1" aria-labelledby="deleteConfirmationModal-@feedback.FeedbackId" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteConfirmationLabel">Confirm Deletion</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete this feedback?</p>
                    </div>
                    <div class="modal-footer">
                        <form asp-action="Delete" method="post">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="FeedbackId" value="@feedback.FeedbackId" />
                            <button type="submit" id="delete-confirm-btn" class="btn btn-danger w-100">Delete Feedback</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    }

    <!-- Pagination Controls -->
    <div class="pagination d-flex justify-content-center gap-2">
        @if (Model.CurrentPage > 1)
        {
            <a href="@Url.Action("Index", new { page = Model.CurrentPage - 1, searchQuery = Model.SearchQuery })" class="btn btn-sm btn-outline-dark">Previous</a>
        }

        @for (var i = 1; i <= Model.TotalPages; i++)
        {
            <a href="@Url.Action("Index", new { page = i, searchQuery = Model.SearchQuery })" class="btn btn-sm btn-outline-dark @((i == Model.CurrentPage) ? "active" : "")">@i</a>
        }

        @if (Model.CurrentPage < Model.TotalPages)
        {
            <a href="@Url.Action("Index", new { page = Model.CurrentPage + 1, searchQuery = Model.SearchQuery })" class="btn btn-sm btn-outline-dark">Next</a>
        }
    </div>
</div>

<script>
    // JavaScript function to render stars
    function renderStars(rating, elementId) {
        const starContainer = document.getElementById(elementId);
        let starsHtml = '';

        // Add full stars
        for (let i = 0; i < Math.floor(rating); i++) {
            starsHtml += '<i class="fas fa-star text-warning"></i>';
        }

        // Add half star if rating is a decimal
        if (rating % 1 !== 0) {
            starsHtml += '<i class="fas fa-star-half-alt text-warning"></i>';
        }

        // Add empty stars
        for (let i = Math.ceil(rating); i < 5; i++) {
            starsHtml += '<i class="far fa-star"></i>';
        }

        // Set the stars HTML to the element
        starContainer.innerHTML = starsHtml;
    }

    // Render stars for each feedback
    @foreach (var feedback in Model.Feedbacks)
    {
        <text>
            renderStars(@feedback.Rating, 'star-rating-@feedback.FeedbackId');
        </text>
    }
</script>