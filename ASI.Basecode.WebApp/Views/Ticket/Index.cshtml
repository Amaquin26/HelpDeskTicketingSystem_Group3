@{
    ViewData["Title"] = "Ticket Page";
}
@using System.Security.Claims;
@model ASI.Basecode.Services.ServiceModels.TicketListViewModel

<!-- Main Content -->
<div class="content p-4" style="margin-left: 200px;">
    <!-- Charts Section -->
    <div class="row">
        <h3 class="mb-4"><strong>Ticket Summary</strong></h3>

        <!-- Tickets by Category -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Tickets by Category</h5>
                    <div class="chart-container">
                        <canvas id="categoryChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tickets by Status -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Tickets by Status</h5>
                    <div class="chart-container">
                        <canvas id="statusChart"></canvas>
                    </div>
                </div>
            </div>
        </div>

        <!-- Tickets by Priority -->
        <div class="col-md-4 mb-4">
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">Tickets by Priority</h5>
                    <div class="chart-container">
                        <canvas id="priorityChart"></canvas>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <h3 class="mb-4"><strong>Ticket Management</strong></h3>

    <div class="d-flex justify-content-between mb-4">
        <!-- Add Ticket Button (aligned to the left) -->
        <a asp-action="AddTicket" asp-controller="Ticket" class="btn btn-success" id="button-addon2">
            <i class="fas fa-plus"></i> Add Ticket
        </a>

        <!-- Search Form (aligned to the right) -->
        <form method="get" asp-action="Index" id="searchForm">
            <div class="input-group">
                <input type="text" class="form-control" name="searchQuery" value="@Context.Request.Query["searchQuery"]" placeholder="Search Ticket" aria-label="Search Ticket" aria-describedby="button-addon2">
                <button class="btn btn-dark" type="submit" id="button-addon2">Search</button>
            </div>
        </form>
    </div>

    <!-- Dynamic Tickets List Table -->
    <div id="ticketList" class="table-responsive">
        <table id="ticketTable" class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th scope="col">Issue</th>
                    <th scope="col">Created By</th>
                    <th scope="col">Category</th>
                    <th scope="col">Priority</th>
                    <th scope="col">Status</th>
                    <th scope="col">Date Created</th>
                    <th scope="col" class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody id="ticketItems">
                @if (Model.Tickets != null && Model.Tickets.Any())
                {
                    foreach (var ticket in Model.Tickets)
                    {
                        <tr>
                            <td>@ticket.Title</td>
                            <td>@ticket.CreatedBy</td>
                            <td>@ticket.CategoryName</td>
                            <td>
                                <span class="badge text-@GetPriorityBadgeClass(ticket.PriorityName) text-uppercase">@ticket.PriorityName</span>
                            </td>
                            <td>
                                <span class="badge bg-@GetStatusBadgeClass(ticket.StatusName) text-uppercase">@ticket.StatusName</span>
                            </td>
                            <td>@ticket.DateAdded</td>
                            <td class="text-center">
                                <a asp-action="ViewTicket" asp-route-id="@ticket.TicketId" class="edit btn btn-outline-dark btn-sm text-center"><i class="fas fa-eye"></i></a>
                                @if (ticket.CanEdit)
                                {
                                    <a asp-action="EditTicket" asp-route-id="@ticket.TicketId" asp- class="btn btn-dark btn-sm text-center">
                                        <i class="fas fa-edit"></i>
                                    </a>
                                }
                                @if (User.FindFirst("Role")?.Value == "Super Admin" || User.FindFirst("Role")?.Value == "Admin")
                                {
                                    <button type="button" class="btn btn-danger btn-sm delete-btn text-center" data-bs-toggle="modal" data-bs-target="#deleteTicketModal-@ticket.TicketId">
                                        <i class="fas fa-trash-alt"></i>
                                    </button>
                                }
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="7" class="text-center">No tickets found.</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Pagination Controls -->
    <div class="pagination d-flex justify-content-center gap-2">
        @if (Model.CurrentPage > 1)
        {
            <a href="@Url.Action("Index", new { page = Model.CurrentPage - 1, searchQuery = Model.SearchQuery })" class="btn btn-sm btn-outline-dark">Previous</a>
        }

        @for (var i = 1; i <= Model.TotalPages; i++)
        {
            <a href="@Url.Action("Index", new { page = i, searchQuery = Model.SearchQuery })" class="btn btn-sm btn-outline-dark @((i == Model.CurrentPage) ? "active" : "")">@i</a>
        }

        @if (Model.CurrentPage < Model.TotalPages)
        {
            <a href="@Url.Action("Index", new { page = Model.CurrentPage + 1, searchQuery = Model.SearchQuery })" class="btn btn-sm btn-outline-dark">Next</a>
        }
    </div>
</div>


<!-- Delete Ticket Modal -->
@foreach (var ticket in Model.Tickets)
{
    <div class="modal fade" id="deleteTicketModal-@ticket.TicketId" tabindex="-1" aria-labelledby="deleteTicketModalLabel-@ticket.TicketId" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteTicketModalLabel">Delete Ticket</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this ticket?</p>
                    <p><strong>Created By: </strong><span class="status">@ticket.CreatedBy</span></p>
                    <p><strong>Status: </strong><span class="status">@ticket.StatusName</span></p>
                    <p><strong>Priority: </strong><span class="priority">@ticket.PriorityName</span></p>
                    <p><strong>Category: </strong><span class="category">@ticket.CategoryName</span></p>
                    <form asp-action="DeleteTicket" method="post">
                        @Html.AntiForgeryToken()
                        <input type="hidden" name="TicketId" value="@ticket.TicketId" />
                        <button type="submit" id="delete-confirm-btn" class="btn btn-danger w-100">Delete Ticket</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
}

@functions {
    public string GetStatusBadgeClass(string status)
    {
        return status.ToLower() switch
        {
            "open" => "primary",
            "in progress" => "warning",
            "resolved" => "success",
            "closed" => "danger",
            "on hold" => "secondary",
            _ => "dark" // Fallback for unexpected values
        };
    }

    public string GetPriorityBadgeClass(string priority)
    {
        return priority.ToLower() switch
        {
            "high" => "danger",
            "medium" => "warning",
            "low" => "success",
            _ => "secondary"
        };
    }
}

@section scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script type="text/javascript">
        // Get the data from the server and log it to the console for verification
        var ticketsByCategory = @Html.Raw(Json.Serialize(Model.TicketsByCategory));
        var ticketsByStatus = @Html.Raw(Json.Serialize(Model.TicketsByStatus));
        var ticketsByPriority = @Html.Raw(Json.Serialize(Model.TicketsByPriority));

        // Map the data for Chart.js format (labels and corresponding counts)
        var categoryLabels = ticketsByCategory.map(item => item.category);
        var categoryCounts = ticketsByCategory.map(item => item.count);
        var statusLabels = ticketsByStatus.map(item => item.status);
        var statusCounts = ticketsByStatus.map(item => item.count);
        var priorityLabels = ticketsByPriority.map(item => item.priority);
        var priorityCounts = ticketsByPriority.map(item => item.count);
        // Example of how you would use this mapped data in a Chart.js chart
        new Chart(document.getElementById("categoryChart"), {
            type: 'doughnut',  // You can choose 'bar', 'pie', 'line', etc.
            data: {
                labels: categoryLabels,  // Labels for each section (e.g., "Bug", "Support")
                datasets: [{
                    data: categoryCounts,  // Corresponding data for each label (e.g., [1, 2])
                    backgroundColor: [
                        'rgba(220, 53, 69, 0.7)',   // Red with 70% opacity
                        'rgba(23, 162, 184, 0.7)',  // Blue with 70% opacity
                        'rgba(108, 117, 125, 0.7)', // Gray with 70% opacity
                        'rgba(0, 123, 255, 0.7)',   // Blue with 70% opacity
                        'rgba(255, 193, 7, 0.7)'    // Yellow with 70% opacity
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom', // Position legend at the bottom
                        align: 'center', // Align legend in the center
                        labels: {
                            boxWidth: 20, // Adjust the width of the legend color box
                            padding: 20,  // Adjust the spacing between legend items
                        }
                    }
                }
            }
        });
        new Chart(document.getElementById("statusChart"), {
            type: 'pie',  // Change chart type as needed
            data: {
                labels: statusLabels,  // Labels for each status ("Open", "Resolved")
                datasets: [{
                    data: statusCounts,  // Corresponding data
                    backgroundColor: [
                        'rgba(0, 123, 255, 0.7)',   // Blue with 70% opacity
                        'rgba(255, 193, 7, 0.7)',    // Yellow with 70% opacity
                        'rgba(40, 167, 69, 0.7)',    // Green with 70% opacity
                        'rgba(220, 53, 69, 0.7)',    // Red with 70% opacity
                        'rgba(108, 117, 125, 0.7)'   // Gray with 70% opacity
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom', // Position legend at the bottom
                        align: 'center', // Align legend in the center
                        labels: {
                            boxWidth: 20, // Adjust the width of the legend color box
                            padding: 20,  // Adjust the spacing between legend items
                        }
                    }
                }
            }
        });
        new Chart(document.getElementById("priorityChart"), {
            type: 'bar',
            data: {
                labels: priorityLabels,  // Labels for each priority ("Low")
                datasets: [{
                    data: priorityCounts,  // Corresponding data
                    backgroundColor: [
                        'rgba(40, 167, 69, 0.7)',    // Green with 70% opacity
                        'rgba(255, 193, 7, 0.7)',    // Yellow with 70% opacity
                        'rgba(220, 53, 69, 0.7)',    // Red with 70% opacity
                        'rgba(108, 117, 125, 0.7)'   // Gray with 70% opacity
                    ]
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'bottom', // Position legend at the bottom
                        align: 'center', // Align legend in the center
                        labels: {
                            boxWidth: 20, // Adjust the width of the legend color box
                            padding: 20,  // Adjust the spacing between legend items
                        }
                    }
                }
            }
        });
    </script>
}